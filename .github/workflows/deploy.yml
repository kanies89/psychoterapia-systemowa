name: Deploy Multi-Container App to Heroku

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  deploy_backend:
    runs-on: ubuntu-latest

    steps:
      # Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Check if commit message contains DEPLOY
      - name: Check Commit Message
        id: check_message
        run: |
          if [[ "${{ github.event.head_commit.message }}" != *"DEPLOY"* ]]; then
            echo "Commit message does not contain 'DEPLOY'. Exiting workflow."
            exit 0
          fi
        shell: bash

      # Install Docker Compose
      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose version

      # Set up Heroku CLI and authenticate
      - name: Set up Heroku CLI and authenticate
        run: |
          curl https://cli-assets.heroku.com/install.sh | sh
          echo "machine api.heroku.com" >> ~/.netrc
          echo "  login heroku" >> ~/.netrc
          echo "  password ${HEROKU_API_KEY}" >> ~/.netrc
          heroku --version
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}

      # Log in to Heroku Container Registry
      - name: Log in to Heroku Container Registry
        run: |
          echo "${{ secrets.HEROKU_API_KEY }}" | docker login --username=_ --password-stdin registry.heroku.com

      # Switch Heroku to container stack (if not already set)
      - name: Switch Heroku to container stack
        run: heroku stack:set container -a ${{ secrets.BACKEND_APP_NAME }}

      # Add Buildpacks if necessary
      - name: Add Heroku Buildpacks
        run: |
          # Check if the Heroku Python buildpack is already set
          current_buildpacks=$(heroku buildpacks -a ${{ secrets.BACKEND_APP_NAME }})
          if [[ "$current_buildpacks" != *"heroku/python"* ]]; then
          echo "Adding Heroku Python buildpack..."
          heroku buildpacks:add heroku/python -a ${{ secrets.BACKEND_APP_NAME }}
          else
          echo "Heroku Python buildpack is already set."
          fi
          # Add additional buildpacks here if needed, e.g., Postgres, Redis, etc.
          # heroku buildpacks:add https://github.com/heroku/heroku-buildpack-redis.git -a ${{ secrets.BACKEND_APP_NAME }}

      # Build and tag the Django image
      - name: Build and Tag Django Image
        run: |
          cd $GITHUB_WORKSPACE 
          docker-compose -f docker-compose.backend.yml build --no-cache
          docker tag kanies/django_website-django:latest registry.heroku.com/${{ secrets.BACKEND_APP_NAME }}/web

      # Push Django image to Heroku
      - name: Push Django Image to Heroku
        run: |
          docker push registry.heroku.com/${{ secrets.BACKEND_APP_NAME }}/web

      # Release the Django app on Heroku
      - name: Release Django Web Process
        run: |
          heroku container:release web -a ${{ secrets.BACKEND_APP_NAME }}

  deploy_frontend:
    runs-on: ubuntu-latest
    needs: deploy_backend

    steps:
      # Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Check if commit message contains DEPLOY
      - name: Check Commit Message
        id: check_message
        run: |
          if [[ "${{ github.event.head_commit.message }}" != *"DEPLOY"* ]]; then
            echo "Commit message does not contain 'DEPLOY'. Exiting workflow."
            exit 0
          fi
        shell: bash

      # Install Docker Compose
      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose version

      # Set up Heroku CLI and authenticate
      - name: Set up Heroku CLI and authenticate
        run: |
          curl https://cli-assets.heroku.com/install.sh | sh
          echo "machine api.heroku.com" >> ~/.netrc
          echo "  login heroku" >> ~/.netrc
          echo "  password ${HEROKU_API_KEY}" >> ~/.netrc
          heroku --version
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}

      # Log in to Heroku Container Registry
      - name: Log in to Heroku Container Registry
        run: |
          echo "${{ secrets.HEROKU_API_KEY }}" | docker login --username=_ --password-stdin registry.heroku.com

      # Switch Heroku to container stack (if not already set)
      - name: Switch Heroku to container stack
        run: heroku stack:set container -a ${{ secrets.FRONTEND_APP_NAME }}


      # Build and tag the Next.js image
      - name: Build and Tag Next.js Image
        run: |
          cd $GITHUB_WORKSPACE 
          docker-compose -f docker-compose.frontend.yml build \
            --build-arg NEXT_PUBLIC_API_URL=https://django-app:8000 \
            --build-arg NEXT_PUBLIC_RECAPTCHA_PUBLIC_KEY=6LePVqwqAAAAABj50TNS5cVYvfpInY5Cc5sET_Nb \
            --no-cache
          docker tag kanies/django_website-nextjs:latest registry.heroku.com/${{ secrets.FRONTEND_APP_NAME }}/web

      # Push Next.js image to Heroku
      - name: Push Next.js Image to Heroku
        run: |
          docker push registry.heroku.com/${{ secrets.FRONTEND_APP_NAME }}/web

      # Release the Next.js app on Heroku
      - name: Release Next.js Web Process
        run: |
          heroku container:release web -a ${{ secrets.FRONTEND_APP_NAME }}

#      - name: Check Backend Logs (brief)
#        run: |
#          echo "Fetching recent logs..."
#          heroku logs --tail --num 5 -a ${{ secrets.FRONTEND_APP_NAME }}  # Fetch only the last 5 lines

  deploy_nginx:
    runs-on: ubuntu-latest
    needs: deploy_frontend
    steps:
      # Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Check if commit message contains DEPLOY
      - name: Check Commit Message
        id: check_message
        run: |
          if [[ "${{ github.event.head_commit.message }}" != *"DEPLOY"* ]]; then
            echo "Commit message does not contain 'DEPLOY'. Exiting workflow."
            exit 0
          fi
        shell: bash

      # Install Docker Compose
      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose version

      # Set up Heroku CLI and authenticate
      - name: Set up Heroku CLI and authenticate
        run: |
          curl https://cli-assets.heroku.com/install.sh | sh
          echo "machine api.heroku.com" >> ~/.netrc
          echo "  login heroku" >> ~/.netrc
          echo "  password ${HEROKU_API_KEY}" >> ~/.netrc
          heroku --version
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}

      # Log in to Heroku Container Registry
      - name: Log in to Heroku Container Registry
        run: |
          echo "${{ secrets.HEROKU_API_KEY }}" | docker login --username=_ --password-stdin registry.heroku.com

      - name: Set Heroku Config Vars
        run: |
          heroku config:set FRONTEND_URL=psychsys-frontend-fde1b2b544e7 --app psychsys-nginx
          heroku config:set BACKEND_URL=psychsys-backend-aeb8bb98bb68 --app psychsys-nginx


      # Switch Heroku to container stack (if not already set)
      - name: Switch Heroku to container stack
        run: heroku stack:set container -a ${{ secrets.PROXY_APP_NAME }}

      # Tag and push Nginx image to Heroku
      - name: Build and Tag Nginx Image
        run: |
          docker build -t kanies/nginx ./nginx
          docker tag kanies/nginx:latest registry.heroku.com/${{ secrets.PROXY_APP_NAME }}/web

      - name: Push Nginx Image to Heroku
        run: |
          docker push registry.heroku.com/${{ secrets.PROXY_APP_NAME }}/web

      - name: Release Nginx Web Process
        run: |
          heroku container:release web -a ${{ secrets.PROXY_APP_NAME }}

